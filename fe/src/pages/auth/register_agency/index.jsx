import { yupResolver } from "@hookform/resolvers/yup";
import LoadingButton from "@mui/lab/LoadingButton";
import { Button, TextField } from "@mui/material";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import { width } from "@mui/system";
import React from "react";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import * as yup from "yup";
import axiosClient from "../../../api/axiosClient";
import LoadingBar from "../../../components/loadding/loading_bar";
import { toastify } from "../../../utils/common";
import "./style.scss";

const validationInput = yup.object().shape({
  userName: yup
    .string()
    .required("T√™n t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
    .min(5, "T√™n t√†i kho·∫£n t·ªëi thi·ªÉu 5 k√Ω t·ª±.")
    .max(30, "T√™n t√†i kho·∫£n t·ªëi ƒëa 30 k√Ω t·ª±."),
  email: yup.string().required("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng").email(),
  address: yup
    .string()
    .min(6, "ƒê·ªãa ch·ªâ √≠t nh·∫•t 10 k√Ω t·ª± !!!")
    .max(30, "ƒê·ªãa ch·ªâ t·ªëi ƒëa 50 k√Ω t·ª± !!!")
    .required("ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
  phone: yup
    .string()
    .max(11, "S·ªë ƒëi·ªán tho·∫°i t·ªëi ƒëa 11 k√Ω t·ª±!!!")
    .min(10, "S·ªë ƒëi·ªán tho·∫°i √≠t nh·∫•t 10 k√Ω t·ª±!!!")
    .required("S·ªë ƒëi·ªán tho·∫°i ch∆∞a ƒë∆∞·ª£c nh·∫≠p!!!"),
  password: yup.string().required("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
  confirmPassword: yup
    .string()
    .required("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    .oneOf([yup.ref("password"), null], "Kh√¥ng tr√πng kh·ªõp."),
});

const RegisterAgency = () => {
  const [open, setOpen] = React.useState(false);
  const [loading, setLoading] = React.useState(false);
  const [loadingPage, setLoadingPage] = React.useState(false);
  const [data, setData] = React.useState({});
  const [OTP, setOTP] = React.useState(0);
  const navigation = useNavigate();

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({
    defaultValues: {
      userName: "",
      email: "",
      address: "",
      phone: "",
      password: "",
      confirmPassword: "",
      codeOTP: "",
    },
    resolver: yupResolver(validationInput),
  });

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleSendEmailRegister = (data) => {
    setData(data);
    setLoading(true);
    axiosClient
      .post("/email/send-code-register", {
        userName: data.userName,
        email: data.email,
      })
      .then((res) => {
        toastify("success", "T√™n ƒë·∫°i l√Ω v√† email h·ª£p l·ªá !");
        handleClickOpen();
        setLoading(false);
      })
      .catch((err) => {
        toastify("error", err.response.data.message || "L·ªói h·ªá th√¥ng !");
        setLoading(false);
      });
  };

  const handleRegister = () => {
    if (OTP < 100000 || OTP > 999999) {
      alert("M√£ OTP g·ªìm 6 ch·ªØ s·ªë !");
    } else {
      setLoadingPage(true);

      axiosClient
        .post("/user/register", {
          codeOtp: OTP,
          userName: data.userName,
          email: data.email,
          address: data.address,
          numberPhone: data.phone,
          password: data.password,
          isAdmin: 2,
        })
        .then((res) => {
          console.log(res);
          toastify(
            "success",
            res.data.message || "T·∫°o t√†i kho·∫£ng th√†nh c√¥ng !"
          );
          handleClose();
          setLoadingPage(false);
          navigation("/login");
          reset();
        })
        .catch((err) => {
          toastify("error", err.response.data.message || "L·ªói h·ªá th√¥ng !");
          setLoadingPage(false);
        });
    }
  };

  return (
    <div className="register_container">
      <div className="register_container_box">
        <h3
          style={{
            fontSize: "20px",
            textAlign: "center",
            color: "#636e72",
            textTransform: "capitalize",
          }}
        >
          Ch√†o m·ª´ng b·∫°n gia nh·∫≠p v·ªõi c·ªông ƒë·ªìng MAFLINE
        </h3>
        <div
          style={{
            display: "flex",
            gap: "25px",
            flexDirection: "column",
            paddingBottom: "20px",
          }}
        >
          <TextField
            error={!!errors?.userName}
            {...register("userName")}
            type="text"
            label="T√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n"
            size="small"
            sx={{ width: "80%", marginLeft: "10%" }}
            helperText={errors.userName?.message}
          />
          <TextField
            error={!!errors?.email}
            {...register("email")}
            type="text"
            label="Email c·ªßa b·∫°n"
            size="small"
            sx={{ width: "80%", marginLeft: "10%" }}
            helperText={errors.email?.message}
          />
          <TextField
            error={!!errors?.address}
            {...register("address")}
            type="text"
            label="ƒê·ªãa ch·ªâ"
            size="small"
            sx={{ width: "80%", marginLeft: "10%" }}
            helperText={errors.address?.message}
          />{" "}
          <TextField
            error={!!errors?.phone}
            {...register("phone")}
            type="text"
            label="S·ªë ƒëi·ªán tho·∫°i"
            size="small"
            sx={{ width: "80%", marginLeft: "10%" }}
            helperText={errors.phone?.message}
          />
          <TextField
            error={!!errors?.password}
            {...register("password")}
            type="password"
            label="Nh·∫≠p m·∫≠t kh·∫©u"
            size="small"
            sx={{ width: "80%", marginLeft: "10%" }}
            helperText={errors.password?.message}
          />
          <TextField
            error={!!errors?.confirmPassword}
            {...register("confirmPassword")}
            type="password"
            label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
            size="small"
            sx={{ width: "80%", marginLeft: "10%" }}
            helperText={errors.confirmPassword?.message}
          />
        </div>

        <div
          style={{
            width: "80%",
            display: "flex",
            marginTop: "10px",
            marginLeft: "10%",
            justifyContent: "space-around",
          }}
        >
          <Button
            variant="outlined"
            onClick={() => {
              navigation("/");
            }}
          >
            Quay l·∫°i
          </Button>
          <LoadingButton
            loading={loading}
            loadingIndicator="Loading‚Ä¶"
            variant="outlined"
            onClick={handleSubmit(handleSendEmailRegister)}
          >
            ƒêƒÉng k√Ω
          </LoadingButton>
        </div>

        <LoadingBar loading={loadingPage} />
      </div>

      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Nh·∫≠p m√£ OTP</DialogTitle>
        <DialogContent>
          <DialogContentText>
            M√£ OTP c√≥ th·ªùi gian hi·ªáu l·ª±c trong 3 ph√∫t s·∫Ω ƒë∆∞·ª£c g·ª≠i v·ªÅ email c·ªßa
            b·∫°n d√πng ƒë·ªÉ x√°c th·ª±c email ho·∫∑c t√†i kho·∫£n c·ªßa b·∫°n ! v√¨ l√≠ do b·∫£o m·∫≠t
            vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y d∆∞·ªõi b·∫•t k√¨ h√¨nh th·ª©c n√†o.{" "}
            <b>MAFLINE</b> c·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa chung t√¥i üòâ
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            label="OTP"
            type="number"
            fullWidth
            variant="standard"
            value={OTP}
            onChange={(e) => {
              setOTP(e.target.value);
            }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>H·ªßy</Button>
          <LoadingButton loading={loadingPage} onClick={handleRegister}>
            G·ª≠i
          </LoadingButton>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default RegisterAgency;
